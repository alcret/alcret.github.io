<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[新年计划]]></title>
      <url>%2F2017%2F01%2F22%2Flist%2F</url>
      <content type="text"><![CDATA[为什么写新年计划首先说明一下为什么要写这个计划： 1、尝试下新的方式（好玩）感觉毕业以后的生活简直就是一团糟，所以想写这么一个东西确定下接下来生活的节奏，避免忘记当初设想好的计划（虽然不一定有用但还是尝试一下） 2、跟风这个就是纯粹的看到好多人写，也不知道有没有用所以就跟着尝试一下了。 对计划的理解必应对计划给出的解释 计划：筹划着想在以后的某一时间段做什么，达到什么目的和要求，是一个准备在不久的将来去具体实现的设想。是一个人或一个组织对未来事物的发展的一种谋划行为，带有一定的预见性与主观能动性。 我对计划的理解就非常简单了。我觉得计划就是生活的一种辅助行为，除了实际可行外重要的就是可以根据实际情况调整了（先为不能完成计划埋下伏笔，哈哈）。 实际计划下面就是实际的计划了。 我将新年计划分为四个部分：生活、工作、学习和习惯。下面说下为什么这样分类 首先我觉得生活才是第一位，无论我们做什么，最终服务的都是我们对生活的体验。例如，工作的薪酬可以提高我们生活的消费能力，工作上获得的成就感可以使我们对生活产生兴趣。同样，学习、培养习惯什么的最终也都会对我们的生活质量产生影响。 一、生活1.整理手机整理手机这个我觉得太重要了。必要的应用其实没有几个，但是用在手机的时间往往都超乎自己的意料。大概就是因为手机应用乱且杂，往往用了一个应用却不经意的看到其他应用也想尝试一下，所以花在手机上的时间自然就多了。我将手机应用按照分屏的方式进行分类。 首屏：放常用软件，比如电话、微信、欧陆词典、相机….。 第二屏：不常用但必须有的软件。比如QQ、相册、一些资讯类应用。 第三屏：不用但觉得好玩的，可有可无的应用。 2.培养两个兴趣爱好 摄影（感觉可以记录下生活中美好的记忆） 手工（这个暂时想弄个手工皮具尝试下，正在探索中） 3.冥想这个貌似是从乔布斯时代开始就被用烂的词了，但是最近心烦意乱的对这个了解了一下感觉有好处，有没有平时说的那样好就尝试一下在写个结论吧。 4.娱乐玩是必不可少的，今年，胖哥的ps4得到位。 二、工作工作这块因为主要是做大数据开发的相关项目，所以主要精力还是要弄好hadoop与java。 三、学习 statistic for business and economics（这本书拖好久了，怎么也得熟读序言了） 玩转kaggle python（这个必须玩会了） kindle（再接再厉） 四、习惯 早起 运动（想起当初买的哑铃就都是泪）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F12%2F31%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[初学java（一）]]></title>
      <url>%2F2016%2F10%2F11%2Fjava_one%2F</url>
      <content type="text"><![CDATA[这次打算写一系列的学习过程，从java开始。 java纯软件运行不涉及到硬件层面 jdk：java的软件开发工具包，包含java的运行环境 jit：解释器，just in time 及时编译 环境变量平台：为应用程序运行提供软件或硬件环境，java平台单纯指软件环境jdk目录： bin：运行相关工具 db：数据库文件 include：非java的本地实现 jre：运行环境（包含JVM） src.zip：源代码（类库提供的） javap：反编译指令javadoc：文档生成器，生成文档命令事例：javadoc -d doc commont.java c:\ 字节码文件与类名一致（有多少个类名就对应多少个字节码文件）运行所需要的字节码文件即可 一、注释、标识符、变量和数据类型1、 注释1.1注释的作用：生成文档提高代码可读性 1.2注释类型一共有三种注释1.单行注释 // 注释内容2.多行注释 // 注释内容（多行注释不支持嵌套）3.文档注释 /*注释内容*/ 2、标识符标识（zhi）符是指代有意义的符号，一般有以下规则： 由字符、数字、下划线及货币符号组成，但首字符不能为数字。 不与java中关键字重名。 不与java中字面常量重名(null、true、false)注意：标识符是区分大小写的。 3、变量变量：在程序运行中，其值是可以改变的量，对应于内存中的一个存储单元。构成：类型 名称 值变量的作用范围： 对应于变量的作用域，指变量的有效区域。 成员变量：作用域为整个类（在类的内部直接声明） 局部变量：从局部变量声明位置开始，到所在最小语句块结束，且局部变量作用域之间无交集可以重命名。 4、数据类型 基本数据类型（可以直接使用） 引用数据类型（需要事先声明） 基本数据类型 类型 字节 范围 boolean 布尔型 未规具体占多少空间 仅true或false两个值，其他任何值均非法 byte 整数类型 1 -2^7 ~ 2^7-1 short 整数类型 2 -2^15 ~ 2^15-1 int 整数类型 4 -2^31 ~ 2^31-1 long 整数类型 8 -2^63 ~ 2^63-1 float 浮点类型 4 单精度(10^-38 ~ 10^38和-10^-38 ~ -10^38 )忽略 double 浮点类型 8 双精度 (10^-308~10^308和-10^-308~-10^308)忽略 char 字符类型 2 0 ~ 2^16-1 使用整形应该注意的： 在做整数运算的时候，要留心可能的最大整数，检查中间结果溢出。 使用浮点数应遵循的原则： 避免数量级相差巨大的数之间的加减运算 避免等量判断 5、转义序列 八进制转义（\0~\377表示十进制0~255） Unicode转义（\u0000~\uffff） 转义字符 5.1 转义字符 字符 表示 \b 退格符 \r 回车符 \’ 单引号’ 单引号 \” 双引号 “ 双引号 \n 换行符 \t 制表符 \f 换页符 \\ 反斜杠\ 反斜杠 为什么要使用转义序列？ 某些字符在java中已经有了特殊的含义（例如”，’等） 某些字符不方便通过键盘输入 转义序列的区别 Unicode转义的处理时间要早于八进制转义与转义字符，并且早于编译器丢弃空白注释之前，\u后面必须要跟4个合理的十六进制数值 转义序列不会再参与进一步转义 二、 进制、数据类型转换1、进制java支持四种进制 进制 前缀 注意 二进制 0b或0B 八进制 0 十进制 十六进制 0x或0X 10~15用a~f表示 2、数据类型低-&gt;高byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; doublechar类型低于int类型取值与byte、short类型重叠，不分高低。boolean类型只能与本类型进行运算而不可以与其他类型。 3、数据类型转换： 自动转换：目标类型比源类型更高时自动完成 低 -&gt; 高 强制转换：目标类型比源类型更低时需要强制完成，使用类型转换符（目标类型） 高 -&gt; 低 4、类型提升原则： byte、short、char提升为int类型 表达式的结果类型与参与运算的操作数最高类型一致（基于上一条） 5、运算符5.1、算数运算符 取余数运算，余数的符号与被除数一致 5.2、三元运算符?:判断表达式1 ? 判断表达式2 : 判断表达式3若判断表达式1为true则返回表达式2的值，否则返回表达式3的值 5.3、移位运算符5.3.1、移运算符 左移运算符：将左侧操作数向左移动右侧操作数指定的位数，右侧以0进行填充。 x &lt;&lt; 1 右移运算符：将左侧操作数向右移动右侧操作数指定的位数，左侧以符号位进行填充。 x &gt;&gt; 1 无符号右移运算符：将左侧操作数向右移动右侧操作数指定的位数，左侧以0进行填充。 x &gt;&gt;&gt; 1 5.4、++与–运算6、注意 char类型无论中英文一律占两个字节 做除法取整时，向0取整 浮点类型存储近似值，并不精确 byte、short与char类型转换时必须强制转换（因无类型高低） 必须要有运算符才算参与了运算，赋值号并不算运算符（例b = -b参与了运算） 当数值位数过多时，可以用_进行分割，且必须存在于数字之间 字面常量int类型表示long类型时，要时候l或L后缀，建议大写 double -&gt; float类型要使用f或F后缀 科学计数法用e p表示以2为底的计数法，且必须是十六进制（例：f = 0x1.2p6f） 三、 数组、多维数组1、数组：相同类型数据的集合，每存在一种类型就会存在一种对应的数组类型，byte[]形式，类型与变量进行有效的分离，数组类型为引用类型。 2、数组的初始化(1) int[] age = {10,20,30}(2) int[] age = new int[] {10,20,30}(3) int[] age = new int[3] 区别： 第一种只能在声明的时候初始化 后两种可以在声明之后初始化 3、元素访问元素的访问通过 数组名与下标的方式访问，数组名[]，索引从0开始。length属性可以获取数组的长度（可用于遍历），例age.length 3.1、数组越界：访问的数组元素，若提供的索引值=数组的长度（length），会发生数组越界（编译没错，运行时产生异常）。 4、局部变量在堆内存 栈内存存放地址，空间有限，随着方法的调用而创建，结束后被销毁 堆内存，存储具体对象，长期存储，随着虚拟机的启动而创建 5、多维数组最多只有255组（1个字节保存数组的维数）n维数组，每个元素类型为（n-1）维数组类型相同初始化同一维数组 预告：关于java中不存在指针又到处是指针的问题]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用GitHub和Hexo搭建Blog系列一——安装]]></title>
      <url>%2F2016%2F08%2F03%2Fhexo-first%2F</url>
      <content type="text"><![CDATA[1、准备工作注意：由于本人还没使用过其他平台，所以本文目前只针对Windows平台，其他平台有待更新。 1.1、安装Git安装方式方法网上很多教程，此处不再赘述。 1.2、安装Node.JS配置好GitHub目录后，在Git shell中输入npm命令安装12npm install hexo-cli -gnpm install hexo --save 1.3、Hexo初始化安装完成后要进行Hexo的初始化操作 1.3.1、建立Hexo文件夹根据实际情况建立文件目录（如F:\Blog），启动Git Shell并切换到该路径下，执行一下指令：123hexo init #在文件夹下此命令生成所需文件cd &lt;folder&gt;npm install 操作结束后，目录如下：12345678├── _config.yml├── package.json├── scaffolds├── scripts├── source| ├── _drafts| └── _posts└── themes 1.3.2、Hexo插件的安装12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --save npm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save 至此，Hexo安装部署的工作基本已经完成了，下面就是要查看一下本地效果了 执行如下指令查看1hexo s 成功后在本地浏览器地址栏中输入localhost:4000 1.4、总结 1.安装github #这个下节会用到2安装Node.JS3.建立Hexo文件夹并初始化4.安装插件 下期预告：github的使用]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[平凡之路两年了，你走到了哪里了]]></title>
      <url>%2F2016%2F08%2F01%2Ftitle-%20firstblog%2F</url>
      <content type="text"><![CDATA[这个blog终于被搭建起来了，竟然还有种莫名的兴奋感，这是我建立的第二个独立博客了，第一次搭建还是在读大学的时候，虽然那个时候blog已经不是很流行了，但是本着折腾折腾的想法，还是租了一个域名，使用WordPress博客程序尝试了一下。但是非常可惜的是没能坚持下来。 距离毕业已经有几个月了，而且在工作之后希望可以每周都坚持写一些东西出来，一方面可以作为工作或生活的一些总结，另一方面可以锻炼一下自己的文笔吧，（虽然觉得自己根本就没有文笔可谈）。所以再次本着折腾折腾的想法，又一次建立起了独立blog，但这次使用的是Hexo和GithubPage，正好最近感觉GithubPage静态网页博客很火的样子，就自己动手折腾了一下，感觉还是蛮不错的。在建立的过程中确实也遇到了不少的问题，感觉网上的教程不是非常的全面和系统，只是描述了一个或几个点而已，所以接下来会尝试写出一个全面的系列性的案例（当然是以我自己为例）。 其实在写作这件事情上我做的并不好，甚至非常糟糕（其实想想貌似并没有做好过什么事情），本来表达能力就比较弱，特别是为了应付考试还要写一些歌颂某党、某政府和美好生活的自己都不知道在表达什么的大大小小作文，以至于现在练就了一身只要有个话题就能写、就能歌颂，当然；如果要求字数的话还是会去查查看的，而且这是最让我最激动的时刻。最重要的是我自己写完都觉得假，何况看的人呢，然而这个习惯倒是保持的很好。但是看了其他网站上一些每天坚持写一千字的网友还挺震撼的，能够每天坚持下来，还能够找到要写的话题，正确表达自己的看法和见解我觉得还是非常厉害的。所以建立这个博客希望可以改善这一点吧，或者为生活添加点乐趣。 还有就是工作以后学习到了很多新知识，所以打算在这里分享一些自己学到的东西顺便检验一下自己学习的承兑，写总结和心得体会。 最后分享一句最近感受颇深的一句话吧。 知止而后定，定而后能静，静儿后能安，安而后能虑，虑而后能得。物有本末，事有始终。知所先后，则近道矣–【大学】 以此共勉]]></content>
    </entry>

    
  
  
</search>
